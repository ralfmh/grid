#include "person.nvgt"

/*
** Represents a person moving around the map, which is not affected by gravity.
*/
class Shadow : Person
{
  private Person@ origin; // The origin of this shaodw (e.g the player).

  /*
  ** Initializes a new instance of the Shadow class.
  */
  Shadow(
    Person@ origin, // The origin of this shaodw.
    Map@ map  // The current map.
  )
  {
    super(origin.X, origin.Y, map);
    @this.origin = @origin;
    this.ManualMoveFactor = 0.2;
  }

  /*
  ** Moves the person automatically (e.g during jumping or falling).
  ** Returns true if the AutoMoveState changed, false otherwise.
  */
  bool AutoMove() override
  {
    return false;
  }

  /*
  ** Changes the persons position, setting X, Y and setting sound_listener.
  ** Returns boolean if the move succeeded.
  */
  void ChangePosition(
    int x, // .
    int y // .
  ) override
  {
    this.X=x;
    this.Y=y;
    this.LocalMaterial = this.Block != null ? this.Block.Material
                         : this.map.DefaultMaterial;
  }

  /*
  ** Finalizes a previously started move.
  ** Returns MoveResult.Moved if the move succeeded.
  */
  private MoveResult FinalizeMove(
    int newX, // The new x position.
    int newY, // The new y position.
    bool isAutoMove // Boolean value indicating whether the move is performed automatically.
  ) override
  {
    @this.Block = this.map.GetBlock(newX, newY);
    if (this.Block == null)
    {
      sound_play(sounds_directory+"/player/shadow/air.ogg", vector(newX, newY));
    }
    this.ChangePosition(newX,newY);
    return Moved;
  }
  
  /*
  ** Initiates a jump from the current position.
  ** Returns true if the jump was initiated, false otherwise.
  */
  bool Jump() override
  {
    this.ChangePosition(this.origin.X, this.origin.Y);
    sound_play(sounds_directory+"/player/shadow/on.ogg", vector(this.X, this.Y));
    return false;
  }
}