#include "../map/map.nvgt"

/*
** Searches for blocks on the map.
*/
final class BlockSearcher
{
  int Axis; // The axis on which to search (0 = x, 1 = y).
  
  /*
  ** Boolean value indicating whether a wall was found
  ** during the last step of the search.
  */
  private bool foundWall;
  
  private Map@ map; // The map on which the search is performed.
  
  /*
  ** The amount that the start position is modified
  ** during each step of the search (1 or -1).
  */
  private int modifier;
  
  private int[] position; // The current position of the searcher.
  
  int Squares;  // The number of passed squares since the search started.
  
  private int target; // The target position.
  
  /*
  ** Initializes a new instance of the BlockSearcher class.
  */
  BlockSearcher(
    Direction direction,  // The search direction.
    Map@ map, // The map on which the search is performed.
    int startX, // Starting x position.
    int startY  // Starting y position.
  )
  {
    this.foundWall = false;
    @this.map = @map;
    this.position = { startX, startY };
    this.Squares = 0;
    switch (direction)
    {
      case Down:
        this.Axis = 1;
        this.modifier = -1;
        this.target = max(MAP_MIN_Y, startY - DEFAULT_VIEW_VERTICAL);
        break;
      case Left:
        this.Axis = 0;
        this.modifier = -1;
        this.target = max(MAP_MIN_X, startX - DEFAULT_VIEW_HORIZONTAL);
        break;
      case Right:
        this.Axis = 0;
        this.modifier = 1;
        this.target = min(this.map.GetMaxX(), startX + DEFAULT_VIEW_HORIZONTAL);
        break;
      case Up:
        this.Axis = 1;
        this.modifier = 1;
        this.target = min(this.map.GetMaxY(), startY + DEFAULT_VIEW_VERTICAL);
        break;
    }
  }
  
  /*
  ** Finds the next block.
  ** Returns a boolean value indicating whether the search is finished.
  */
  bool Find(
    Block@ &out block  // The found block.
  )
  {
    if (this.position[this.Axis] == this.target || this.foundWall)
    {
      return false;
    }
    this.position[this.Axis] += this.modifier;
    this.Squares++;
    @block = this.map.GetBlock(this.position[0], this.position[1]);
    this.foundWall = @block != null && block.Type == Wall;
    return true;
  }
}

int max(int a, int b) { return a > b ? a : b; }

int min(int a, int b) { return a < b ? a : b; }