#include "axis.nvgt"
#include "../map/map.nvgt"

/*
** Searches for blocks on the map.
*/
final class BlockSearcher
{
  /*
  ** Boolean value indicating whether a wall was found
  ** during the last step of the search.
  */
  private bool foundWall;

  private Map@ map; // The map on which the search is performed.

  /*
  ** The amount that the start position is modified
  ** during each step of the search (1 or -1).
  */
  private int modifier;

  private int[] position; // The current position of the searcher.

  Axis SearchAxis; // The axis on which to search.

  int Squares;  // The number of passed squares since the search started.

  private int target; // The target position.

  /*
  ** Initializes a new instance of the BlockSearcher class.
  */
  BlockSearcher(
    Direction direction,  // The search direction.
    Map@ map, // The map on which the search is performed.
    int startX, // Starting x position.
    int startY, // Starting y position.
    int horizontalRange,  // The horizontal search range.
    int verticalRange // The vertical search range.
  )
  {
    this.foundWall = false;
    @this.map = @map;
    this.position = { startX, startY };
    this.Squares = 0;
    switch (direction)
    {
    case Down:
      this.SearchAxis = Vertical;
      this.modifier = -1;
      this.target = max(MAP_MIN_Y, startY - verticalRange);
      break;
    case Left:
      this.SearchAxis = Horizontal;
      this.modifier = -1;
      this.target = max(MAP_MIN_X, startX - horizontalRange);
      break;
    case Right:
      this.SearchAxis = Horizontal;
      this.modifier = 1;
      this.target = min(this.map.GetMaxX(), startX + horizontalRange);
      break;
    case Up:
      this.SearchAxis = Vertical;
      this.modifier = 1;
      this.target = min(this.map.GetMaxY(), startY + verticalRange);
      break;
    }
  }

  /*
  ** Advances the search to the next position.
  ** Returns a boolean value indicating whether the search is finished.
  */
  private bool Advance()
  {
    if (this.position[this.SearchAxis] == this.target || this.foundWall)
    {
      return false;
    }
    this.position[this.SearchAxis] += this.modifier;
    this.Squares++;
    return true;
  }

  /*
  ** Checks if the last search step encountered a wall
  ** and sets foundWall accordingly.
  */
  void CheckWall(
    Block@ block  // The found block.
  )
  {
    this.foundWall = @block != null && block.Type == Wall;
  }

  /*
  ** Finds the next block.
  ** Returns a boolean value indicating whether the search is finished.
  */
  bool Find(
    Block@ &out block  // The found block.
  )
  {
    if (!this.Advance())
    {
      return false;
    }
    @block = this.map.GetBlock(this.position[0], this.position[1]);
    this.CheckWall(block);
    return true;
  }

  /*
  ** Finds the next block.
  ** Returns a boolean value indicating whether the search is finished.
  */
  bool Find(
    Block@ &out block,  // The found block.
    int &out fromY, // The minimum y position of the block.
    int &out toY  // The maximum y position of the block.
  )
  {
    if (!this.Advance())
    {
      return false;
    }
    @block = this.map.GetBlock(this.position[0], this.position[1], fromY, toY);
    this.CheckWall(block);
    return true;
  }

  /*
  ** Returns the current position.
  ** Returns a vector indicating the current position.
  */
   vector GetPosition(
  )
  {
    return vector(this.position[0],this.position[1]);
  }
}

int max(int a, int b) {
  return a > b ? a : b;
}

int min(int a, int b) {
  return a < b ? a : b;
}