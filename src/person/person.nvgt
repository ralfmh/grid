#include "../map/map.nvgt"
#include "auto_move_state.nvgt"
#include "constants.nvgt"
#include "direction.nvgt"
#include "move_result.nvgt"

/*
** Represents a person moving around the map.
*/
final class Person
{
  /*
  ** The interval in ms for each automatically performed move.
  */
  private int autoMoveInterval;
  
  AutoMoveState AutoMoveState;  // Current AutoMoveState.
  
  private timer autoMoveTimer;  // The timer controlling automatic moves.
  
  Block@ Block; // The current block at which the person is located.
  
  int FallInterval; // The interval in ms for each falling move.
  
  private int health; // Current health of the person.
  
  int JumpInterval; // The interval in ms for each jumping move.
  
  private int jumpStart;  // Y position where the person started to jump.
  
  private Map@ map; // The current map.
  
  /*
  ** The interval in ms for each manually performed move.
  */
  int ManualMoveInterval;
  
  private timer manualMoveTimer;  // The timer controlling manual moves.
  
  int X;  // Current x position.
  
  int Y;  // Current y position.
  
  /*
  ** Initializes a new instance of the Person class.
  */
  Person(
    int initialX, // The initial x position.
    int initialY, // The initial y position.
    Map@ map  // The current map.
  )
  {
    this.AutoMoveState = Standing;
    @this.Block = null;
    this.health = 100;
    @this.map = @map;
    this.X = initialX;
    this.Y = initialY;
  }
  
  /*
  ** Moves the person automatically (e.g during jumping or falling).
  */
  void AutoMove()
  {
    MoveResult result;
    switch (this.AutoMoveState)
    {
      case Jumping:
        result = this.Move(Up, true);
        if ((this.Y - this.jumpStart) >= DEFAULT_JUMP_RANGE
          || result == Walled)
        {
          this.AutoMoveState = Falling;
          this.autoMoveInterval = this.FallInterval;
        }
        break;
      case Falling:
        if (this.Block != null && this.Block.Type != Wall)
        {
          this.AutoMoveState = Standing;
          break;
        }
        result = this.Move(Down, true);
        if (this.Block != null || result == Edged)
        {
          this.AutoMoveState = Standing;
        }
        break;
    }
  }
  
  /*
  ** Initiates a jump from the current position.
  ** Returns true if the jump was initiated, false otherwise.
  */
  bool Jump()
  {
    if (this.AutoMoveState != Standing)
    {
      return false;
    }
    this.jumpStart = this.Y;
    this.AutoMoveState = Jumping;
    this.autoMoveInterval = this.JumpInterval;
    return true;
  }
  
  /*
  ** Moves the person in the given direction.
  ** Returns MoveResult.Moved if the move succeeded.
  */
  MoveResult Move(
    Direction direction // The direction in which to move.
  )
  {
    return this.Move(direction, false);
  }
  
  /*
  ** Moves the person in the given direction.
  ** Returns MoveResult.Moved if the move succeeded.
  */
  private MoveResult Move(
    Direction direction,  // The direction in which to move.
    bool isAutoMove // Boolean value indicating whether the move is performed automatically.
  )
  {
    if (isAutoMove)
    {
      if (this.autoMoveTimer.elapsed < this.autoMoveInterval)
      {
        return Delayed;
      }
      this.autoMoveTimer.restart();
    }
    else
    {
      if (this.manualMoveTimer.elapsed < this.ManualMoveInterval)
      {
        return Delayed;
      }
      this.manualMoveTimer.restart();
    }
    int newX = this.X;
    int newY = this.Y;
    switch (direction)
    {
      case Down:
        newY--;
        break;
      case Left:
        newX--;
        break;
      case Right:
        newX++;
        break;
      case Up:
        newY++;
        break;
    }
    if (newX > this.map.GetMaxX() || newX < MAP_MIN_X || newY < MAP_MIN_Y)
    {
      return Edged;
    }
    @this.Block = this.map.GetBlock(newX, newY);
    if (this.Block == null)
    {
      if (this.AutoMoveState == Standing)
      {
        if (newY != this.Y)
        {
          return Edged;
        }
        else
        {
          this.AutoMoveState = Falling;
          this.autoMoveInterval = this.FallInterval;
        }
      }
    }
    else if (this.Block.Type == Wall)
    {
      return Walled;
    }
    this.X = newX;
    this.Y = newY;
    return Moved;
  }
}