#include "../map/map.nvgt"
#include "auto_move_state.nvgt"
#include "constants.nvgt"
#include "direction.nvgt"
#include "move_result.nvgt"

/*
** Represents a person moving around the map.
*/
final class Person
{
  AutoMoveState AutoMoveState;  // Current AutoMoveState.
  
  Block@ Block; // The current block at which the person is located.
  
  private int health; // Current health of the person.
  
  private int jumpStart;  // Y position where the person started to jump.
  
  private Map@ map; // The current map.
  
  int X;  // Current x position.
  
  int Y;  // Current y position.
  
  /*
  ** Initializes a new instance of the Person class.
  */
  Person(
    int initialX, // The initial x position.
    int initialY, // The initial y position.
    Map@ map  // The current map.
  )
  {
    this.AutoMoveState = Standing;
    @this.Block = null;
    this.health = 100;
    @this.map = @map;
    this.X = initialX;
    this.Y = initialY;
  }
  
  /*
  ** Moves the person automatically (e.g during jumping or falling).
  */
  void AutoMove()
  {
    MoveResult result;
    if (this.AutoMoveState == Jumping)
    {
      result = this.Move(Up);
      if ((this.Y - this.jumpStart) >= DEFAULT_JUMP_RANGE)
      {
        this.AutoMoveState = Falling;
      }
    }
  }
  
  /*
  ** Initiates a jump from the current position.
  */
  void Jump()
  {
    this.jumpStart = this.Y;
    this.AutoMoveState = Jumping;
  }
  
  /*
  ** Moves the person in the given direction.
  ** Returns MoveResult.Moved if the move succeeded.
  */
  MoveResult Move(
    Direction direction // The direction in which to move.
  )
  {
    int newX = this.X;
    int newY = this.Y;
    switch (direction)
    {
      case Down:
        newY--;
        break;
      case Left:
        newX--;
        break;
      case Right:
        newX++;
        break;
      case Up:
        newY++;
        break;
    }
    if (newX > this.map.GetMaxX() || newX < MAP_MIN_X)
    {
      return Edged;
    }
    @this.Block = this.map.GetBlock(newX, newY);
    if (this.Block == null)
    {
      if (newY != this.Y && this.AutoMoveState == Standing)
      {
        return Edged;
      }
    }
    else if (this.Block.Type == Wall)
    {
      return Walled;
    }
    this.X = newX;
    this.Y = newY;
    return Moved;
  }
}