#include "../map/map.nvgt"
#include "auto_move_state.nvgt"
#include "block_searcher.nvgt"
#include "constants.nvgt"
#include "direction.nvgt"
#include "move_result.nvgt"

/*
** Represents a person moving around the map.
*/
final class Person
{
  /*
  ** The interval in ms for each automatically performed move.
  */
  private int autoMoveInterval;
  
  AutoMoveState AutoMoveState;  // Current AutoMoveState.
  
  private timer autoMoveTimer;  // The timer controlling automatic moves.
  
  /*
  ** The current block at which the person is located. It may include walls
  ** or empty space.
  */
  Block@ Block;
  
  int FallInterval; // The interval in ms for each falling move.
  
  private int health; // Current health of the person.
  
  /*
  ** Boolean value indicating whether the person is hooked to a block.
  */
  bool Hooked;
  
  /*
  ** The block that the person is standing on while hooked to another block.
  */
  private Block hookBlock("hook", Ladder);
  
  private int hookFromY;  // The minimum y position of the hook.
  
  private int hookToY;  // The maximum y position of the hook.
  
  int JumpInterval; // The interval in ms for each jumping move.
  
  private int jumpStart;  // Y position where the person started to jump.
  
  /*
  ** The last known material that the person was standing on.
  */
  private string localMaterial;
  
  private Map@ map; // The current map.
  
  /*
  ** The interval in ms for each manually performed move.
  */
  int ManualMoveInterval;
  
  private timer manualMoveTimer;  // The timer controlling manual moves.
  
  int X;  // Current x position.
  
  int Y;  // Current y position.
  
  /*
  ** Initializes a new instance of the Person class.
  */
  Person(
    int initialX, // The initial x position.
    int initialY, // The initial y position.
    Map@ map  // The current map.
  )
  {
    this.AutoMoveState = Standing;
    this.health = 100;
    @this.map = @map;
    this.X = initialX;
    this.Y = initialY;
    @this.Block = this.map.GetBlock(this.X, this.Y);
    this.localMaterial = this.Block != null ? this.Block.Material
      : this.map.DefaultMaterial;
  }
  
  /*
  ** Moves the person automatically (e.g during jumping or falling).
  ** Returns true if the AutoMoveState changed, false otherwise.
  */
  bool AutoMove()
  {
    MoveResult result;
    switch (this.AutoMoveState)
    {
      case Jumping:
        result = this.Move(Up, true);
        if ((this.Y - this.jumpStart) >= DEFAULT_JUMP_RANGE
          || result == Walled)
        {
          this.AutoMoveState = Falling;
          this.autoMoveInterval = this.FallInterval;
          return true;
        }
        return false;
      case Falling:
        if (this.Block != null && this.Block.Type != Wall)
        {
          this.AutoMoveState = Standing;
          return true;
        }
        result = this.Move(Down, true);
        if (this.Block != null || result == Edged)
        {
          this.AutoMoveState = Standing;
          return true;
        }
        return false;;
    }
    return false;
  }
  
  /*
  ** Initiates a jump from the current position.
  ** Returns true if the jump was initiated, false otherwise.
  */
  bool Jump()
  {
    if (this.AutoMoveState != Standing)
    {
      return false;
    }
    this.jumpStart = this.Y;
    this.AutoMoveState = Jumping;
    this.autoMoveInterval = this.JumpInterval;
    return true;
  }
  
  /*
  ** Moves the person in the given direction.
  ** Returns MoveResult.Moved if the move succeeded.
  */
  MoveResult Move(
    Direction direction // The direction in which to move.
  )
  {
    return this.Move(direction, false);
  }
  
  /*
  ** Moves the person in the given direction.
  ** Returns MoveResult.Moved if the move succeeded.
  */
  private MoveResult Move(
    Direction direction,  // The direction in which to move.
    bool isAutoMove // Boolean value indicating whether the move is performed automatically.
  )
  {
    if (isAutoMove)
    {
      if (this.autoMoveTimer.elapsed < this.autoMoveInterval)
      {
        return Delayed;
      }
      this.autoMoveTimer.restart();
    }
    else
    {
      if (this.manualMoveTimer.elapsed < this.ManualMoveInterval)
      {
        return Delayed;
      }
      this.manualMoveTimer.restart();
    }
    int newX = this.X;
    int newY = this.Y;
    switch (direction)
    {
      case Down:
        newY--;
        break;
      case Left:
        newX--;
        break;
      case Right:
        newX++;
        break;
      case Up:
        newY++;
        break;
    }
    if (newX > this.map.GetMaxX() || newX < MAP_MIN_X || newY < MAP_MIN_Y)
    {
      return Edged;
    }
    if (this.Hooked)
    {
      if (newY <= this.hookFromY || newY >= this.hookToY || newX != this.X)
      {
        this.Hooked = false;
        @this.Block = this.map.GetBlock(newX, newY);
      }
      else
      {
        @this.Block = @this.hookBlock;
      }
    }
    else
    {
      @this.Block = this.map.GetBlock(newX, newY);
    }
    if (this.Block == null)
    {
      if (this.Hooked)
      {
        this.X = newX;
        this.Y = newY;
        return Moved;
      }
      else if (this.AutoMoveState == Standing)
      {
        if (newY != this.Y)
        {
          return Edged;
        }
        else
        {
          this.AutoMoveState = Falling;
          this.autoMoveInterval = this.FallInterval;
        }
      }
    }
    else if (this.Block.Type == Wall)
    {
      if (this.AutoMoveState == Falling)
      {
        this.X = newX;
        this.Y = newY;
      }
      return Walled;
    }
    this.X = newX;
    this.Y = newY;
    this.localMaterial = this.Block != null ? this.Block.Material
      : this.map.DefaultMaterial;
    return Moved;
  }
  
  /*
  ** Checks if a block with a different material than the current block
  ** is approached during movement.
  */
  bool Sonar(
    Direction direction,  // The direction in which to search for the block.
    int &out distance,  // The distance to the block.
    EntityType &out type  // The type of the block.
  )
  {
    string remoteMaterial;
    BlockSearcher searcher(direction, this.map, this.X, this.Y,
      DEFAULT_SONAR_RANGE, DEFAULT_SONAR_RANGE);
    Block@ block;
    while(searcher.Find(block))
    {
      if (@block != null)
      {
        remoteMaterial = block.Material;
        type = block.Type;
      }
      else
      {
        remoteMaterial = this.map.DefaultMaterial;
        type = None;
      }
      if (remoteMaterial != this.localMaterial
        && (searcher.SearchAxis == Horizontal
        || remoteMaterial != this.map.DefaultMaterial))
      {
        distance = searcher.Squares;
        return true;
      }
    }
    return false;
  }
  
  /*
  ** Summarizes the horizontally or vertically adjacent blocks.
  */
  string View(
    Direction direction // The direction in which to view the adjacent blocks.
  )
  {
    string view = "";
    Block@ block;
    string viewMaterial = this.localMaterial;
    string remoteMaterial;
    string type;
    BlockSearcher searcher(direction, this.map, this.X, this.Y,
      DEFAULT_VIEW_HORIZONTAL, DEFAULT_VIEW_VERTICAL);
    while (searcher.Find(block))
    {
      type = "";
      if (@block != null)
      {
        remoteMaterial = block.Material;
        if (block.Type != Tile)
        {
          type = ENTITY_TYPE_NAME[block.Type] + " ";
        }
      }
      else
      {
        remoteMaterial = this.map.DefaultMaterial;
      }
      if (remoteMaterial != viewMaterial)
      {
        if (searcher.SearchAxis == Horizontal
          || remoteMaterial != this.map.DefaultMaterial)
        {
          view += type + remoteMaterial + " (" + searcher.Squares + "), ";
        }
        viewMaterial = remoteMaterial;
      }
    }
    if (view == "")
    {
      return "nothing";
    }
    return view;
  }
  
  /*
  ** Hooks into a block above or below the current position.
  */
  void Hook(
    Direction direction,  // The vertical direction in which to hook.
    int xOffset // The offset from the x axis.
  )
  {
    if (this.Hooked)
    {
      this.Hooked = false;
      this.AutoMoveState = Falling;
      @this.Block = null;
      return;
    }
    int x = this.X + xOffset;
    if (x < MAP_MIN_X || x > this.map.GetMaxX())
    {
      return;
    }
    Block@ block;
    int fromY;
    int toY;
    BlockSearcher searcher(direction, this.map, x, this.Y, 
      0, DEFAULT_HOOK_RANGE);
    while (searcher.Find(block, fromY, toY))
    {
      if (@block != null)
      {
        this.Hooked = true;
        if (direction == Up)
        {
          this.Y++;
          this.hookFromY = this.Y;
          this.hookToY = toY;
        }
        else
        {
          this.Y--;
          this.hookFromY = fromY;
          this.hookToY = this.Y;
        }
        this.X = x;
        return;
      }
    }
  }
}