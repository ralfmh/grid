void game() {
  Map m();
  string definition = file_get_contents("default.map");
  if (definition.is_empty())
  {
    alert("Grid", "Unable to open default.map.");
    return;
  }
  string[] errors = m.Parse(definition);
  if (errors.length() > 0) {
    alert("Validation errors", join(errors,"\n"));
    return;
  }
  m.CreateGrids();
  Block@[] usedBlocks = m.GetUsedBlocks();
  BlockSound@[] blockSounds;
  for (int i = 0; i < usedBlocks.length(); i++) {
    blockSounds.insert_last(BlockSound(usedBlocks[i].Material,usedBlocks[i].Type));
  }
  Person p(0, 0, m);
  p.FallInterval = DEFAULT_FALL_INTERVAL;
  p.JumpInterval = DEFAULT_JUMP_INTERVAL;
  MoveResult move;
  Direction sonarDirection;
  vector sonarPosition;
  bool sonarEnabled = false;
  sound[] sonarSound(EntityTypes);
  sonarSound[Ladder].load(sounds_directory + "/player/sonar/ladder.ogg");
  sonarSound[None].load(sounds_directory + "/player/sonar/air.ogg");
  sonarSound[Tile].load(sounds_directory + "/player/sonar/tile.ogg");
  sonarSound[Wall].load(sounds_directory + "/player/sonar/wall.ogg");
  EntityType sonarType;
  bool speakText = true;
  string text;
  p.GetText(text);
  speak(text);
  while(true) {
    wait(5);
    if (key_pressed(KEY_ESCAPE)) break;
    if (key_pressed(KEY_C)) speak(p.X+", "+p.Y+(p.LocalMaterial!=""?" on "+p.LocalMaterial:""));
    if(key_pressed(KEY_H)) speak(p.Health+" health");
    if (key_down(KEY_LSHIFT) || key_down(KEY_RSHIFT)) {
      for (int i = 0; i < DIRECTION_KEY.length(); i++) {
        if (key_pressed(DIRECTION_KEY[i])) {
          speak(p.View(Direction(i)));
        }
      }
    }
    else {
      if (key_down(KEY_LEFT)) {
        move = p.Move(Left);
        sonarDirection = Left;
      }
      else if (key_down(KEY_RIGHT)) {
        move = p.Move(Right);
        sonarDirection = Right;
      }
      else if (key_down(KEY_UP)) {
        move = p.Move(Up);
        sonarDirection = Up;
      }
      else if (key_down(KEY_DOWN)) {
        move = p.Move(Down);
        sonarDirection = Down;
      }
    }
    if (key_pressed(KEY_SPACE)) {
      if (p.Jump()) {
        sound_play(sounds_directory+"/player/jump.ogg");
      }
    }
    else if (key_pressed(KEY_F3)) {
      sonarEnabled = !sonarEnabled;
      speak("sonarEnabled " + sonarEnabled);
    }
    else if (key_pressed(KEY_T)) {
      speakText = !speakText;
      speak("speakText " + speakText);
    }
    if (key_down(KEY_LCTRL) || key_down(KEY_RCTRL)) {
      p.ManualMoveInterval = DEFAULT_RUN_INTERVAL;
    }
    else {
      p.ManualMoveInterval = DEFAULT_MOVE_INTERVAL;
    }
    if (p.AutoMoveState == Jumping || p.AutoMoveState == Landing)
      p.ManualMoveInterval /= JUMP_SPEEDUP_FACTOR;
    if (p.AutoMoveState == Falling || p.AutoMoveState == Jumping || p.AutoMoveState == Landing) {
      sonarDirection = Down;
    }
    if (sonarEnabled && (move == Moved && p.Sonar(sonarDirection, sonarPosition, sonarType))) {
      sonarSound[sonarType].stop();
      sonarSound[sonarType].set_position_3d(sonarPosition);
      sonarSound[sonarType].play();
    }
    if (move == Moved || move == Walled || p.AutoMove()) {
      if (p.Block != null) {
        blockSounds[blockSounds.find(BlockSound(p.Block.Material,p.Block.Type))].PlayStep();
      }
      if (speakText && p.GetText(text)) {
        speak(text);
      }
      move = Delayed;
    }
  }
}