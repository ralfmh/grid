/*
** The name of the default tile, in case none is defined
** at the requested position, or the position lies outside the map boundaries.
*/
const string DEFAULT_BLOCK = "air";

/*
** The default text, in case none is defined
** at the requested position, or the position lies outside the map boundaries.
*/
const string DEFAULT_TEXT = "";

/*
** Segments.
*/
const string SEGMENT_FX = "fx";
const string SEGMENT_FY = "fy";
const string SEGMENT_LV = "lv";
const string SEGMENT_ML = "ml";
const string SEGMENT_TX = "tx";
const string SEGMENT_TY = "ty";


/*
** Entity types.
*/
const string TYPE_LADDER = "ladr";
const string TYPE_TEXT = "text";
const string TYPE_TILE = "tile";
const string TYPE_WALL = "wall";

string[] ENTITY_TYPE =
{
  TYPE_LADDER,
  TYPE_TEXT,
  TYPE_TILE,
  TYPE_WALL
};

/*
** Map definition array.
** [0]: Entity type.
** [1]: Segment 1.
** [2]: Segment n...
*/
const string[][] MAP_DEFINITION =
{
  {
    TYPE_LADDER,
    SEGMENT_FX,
    SEGMENT_FY,
    SEGMENT_ML,
    SEGMENT_TX,
    SEGMENT_TY
  },
  {
    TYPE_TEXT,
    SEGMENT_FX,
    SEGMENT_FY,
    SEGMENT_LV,
    SEGMENT_TX,
    SEGMENT_TY
  },
  {
    TYPE_TILE,
    SEGMENT_FX,
    SEGMENT_FY,
    SEGMENT_ML,
    SEGMENT_TX
  },
  {
    TYPE_WALL,
    SEGMENT_FX,
    SEGMENT_FY,
    SEGMENT_ML,
    SEGMENT_TX,
    SEGMENT_TY
  }
};

/*
** The character which separates lines in the definition.
*/
const string LINE_SEPARATOR = "\n";

/*
** The character which separates segments in a line.
*/
const string SEGMENT_SEPARATOR = " ";

/*
** Returns an array of required segments for a given type.
*/
string[] GetRequiredSegments(
  int typeIndex // The index of the type.
)
{
  string[] segments;
  for (int i = 1; i < MAP_DEFINITION[typeIndex].length(); i++)
  {
    segments.insert_last(MAP_DEFINITION[typeIndex][i]);
  }
  return segments;
}